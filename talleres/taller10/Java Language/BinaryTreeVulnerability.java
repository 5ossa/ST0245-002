import java.util.*;

public class BinaryTreeVulnerability
{

    static class Node
    {
        String[] value;
        boolean vuln;
        Node left;
        Node right;

        Node(String[] value, boolean vuln) {
            this.value = value;
            this.vuln = vuln;
            right = null;
            left = null;
        }
    }

    public void Insercion(Node param, boolean vuln, String name, String phone){
        String[] gae = {name, phone};

        if(vuln){
            if(param.right != null)
                Insercion(param.right, vuln, name, phone);
            else{
                param.right = new Node(gae, vuln);
            }
        }else{
            if(param.left != null)
                Insercion(param.left, vuln, name, phone);
            else
                param.left = new Node(gae, vuln);
        }
    }
    
    public static Node minimumElement(Node root) {
        if (root.left == null)
            return root;
        else {
            return minimumElement(root.left);
        }
    }
    
    public static Node delete(Node root, String[] value) {
        if (root == null)
            return null;
        if (root.vuln) {
            root.left = delete(root.left, value);
        } else if (!root.vuln) {
            root.right = delete(root.right, value);
        } else {
            // if nodeToBeDeleted have both children
            if (root.left != null && root.right != null) {
                Node temp = root;
                // Finding minimum element from right
                Node minNodeForRight = minimumElement(temp.right);
                // Replacing current node with minimum node from right subtree
                root.value = minNodeForRight.value;
                // Deleting minimum node from right now
                root.right = delete(root.right, minNodeForRight.value);

            }
            // if nodeToBeDeleted has only left child
            else if (root.left != null) {
                root = root.left;
            }
            // if nodeToBeDeleted has only right child
            else if (root.right != null) {
                root = root.right;
            }
            // if nodeToBeDeleted do not have child (Leaf node)
            else
                root = null;
        }
        return root;
    }
    
    public static void main(String[] args){
        BinaryTreeVulnerability a = new BinaryTreeVulnerability();
        
        String[] data = {"joto", "301"};
        
        Node joto = new Node(data, true);
        
        a.Insercion(joto, true, "Gloria", "204312802");
        a.Insercion(joto, true, "Joteria", "30123");
    }
}